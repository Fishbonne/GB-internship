<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd">


    <http pattern="/**" use-expressions="true" name="restSecurityFilterChain" create-session="stateless">
        <http-basic/>
        <intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" requires-channel="https"/>
        <intercept-url pattern="/user/signup" access="permitAll()" requires-channel="https"/>
        <intercept-url pattern="/user/**" access="isAuthenticated()" requires-channel="https"/>
        <csrf disabled="true"/>
    </http>

    <!--<authentication-manager>-->
        <!--<authentication-provider>-->
            <!--<userDto-service>-->
                <!--<userDto name="admin" password="admin" authorities="ROLE_ADMIN"/>-->
            <!--</userDto-service>-->
        <!--</authentication-provider>-->
    <!--</authentication-manager>-->

    <beans:bean class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" id="encoder"/>

    <authentication-manager>
        <authentication-provider>
            <password-encoder ref="encoder"/>
            <jdbc-user-service data-source-ref="dataSource"
                               users-by-username-query=
                                       "SELECT username,password, TRUE FROM users WHERE username=?"
                               authorities-by-username-query=
                                       "SELECT username, role FROM user_roles WHERE username =?"/>
        </authentication-provider>
    </authentication-manager>

</beans:beans>